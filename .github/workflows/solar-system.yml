name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}
    
jobs:
    unit-testing:
        name: Unit Testing
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: 20
    
        - name: Cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{runner.os}}-node-modules-${{hashFiles('package-lock.json')}}

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
      name: code-coverage
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: setup nodejs environment version 18
          uses: actions/setup-node@v4
          with:
            node-version: 18

        - name: Cache NPM dependencies
          uses: actions/cache@v4
          with:
           path: node_modules
           key: ${{runner.os}}-node-modules-${{hashFiles('package-lock.json')}}

        - name: Install dependencies
          run: npm install

        - name: Run coverage
          continue-on-error: true
          run: npm run coverage

        - name: Upload coverage Result
          uses: actions/upload-artifact@v4
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5

    docker:
      name: Containerization
      needs: [unit-testing, code-coverage]
      permissions: 
        packages: write     #this permission is done at the job level to allow the default github toek associated with the workflow to have access to push to ghcr
      runs-on: ubutu-latest
      steps:
        - name: checkout
          uses: actions/checkout@v4

        - name: Docker login
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME}}
            password: ${{secrets.DOCKERHUB_TOKEN}}


            #use the step below if you are using a container resgitry other than docker (e.g github CR)
        - name: GHCR login
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            #for the credentials, no need to store them as secrets or varaibles in the repo settings, github already made provison for this and can be referenced as seen below
            username: ${{ github.repository_owner}}
            password: ${{ secrets.GITHUB_TOKEN }} 
     
        - name: Docker build
          uses: docker/build-push-action@v5
          with:
            context: .
            push: false   #change this to true  if you want to push the image to a container registry
            tags: ${{secrets.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}
            #uncomment this if you want to push to multiple registry and make it a multi-line tag
            #ghcr.io/${{github.repository_owner}}/solar-system:${{github.sha}}

        - name: Testing the docker image
          run: |
            docker images
            docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO-PASSWORD=$MONGO_PASSWORD \
            ${{secrets.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}

            export IP=$(docker inspect -f '{{range .Networksettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live


